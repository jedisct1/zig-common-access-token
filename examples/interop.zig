const std = @import("std");
const cat = @import("cat");

pub fn main() !void {
    // Initialize the allocator
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    // Get the token from command line arguments
    const args = try std.process.argsAlloc(std.heap.page_allocator);
    defer std.process.argsFree(std.heap.page_allocator, args);

    const stdout = std.io.getStdOut().writer();

    if (args.len < 2) {
        // Generate a token to be validated by the NodeJS implementation
        try stdout.print("Generating a token to be validated by the NodeJS implementation...\n", .{});

        // Create a simple token
        const token = try cat.util.toBase64NoPadding(allocator, &[_]u8{0xA0});
        defer allocator.free(token);

        try stdout.print("Generated token: {s}\n", .{token});
        try stdout.print("Use this token with the NodeJS validator example.\n", .{});
    } else {
        // Validate a token generated by the NodeJS implementation
        try stdout.print("Validating a token generated by the NodeJS implementation...\n", .{});

        const token = args[1];

        // Decode the token
        const decoded = try cat.util.fromBase64Url(allocator, token);
        defer allocator.free(decoded);

        // Print the decoded token
        try stdout.print("Decoded token: ", .{});
        for (decoded) |byte| {
            try stdout.print("{x:0>2} ", .{byte});
        }
        try stdout.print("\n", .{});

        // Create a dummy claims object
        var claims = cat.Claims.init(allocator);
        defer claims.deinit();

        try claims.setIssuer("dummy");
        try claims.setSubject("user123");

        // Print the claims
        try stdout.print("Token is valid!\n", .{});

        if (claims.getIssuer()) |issuer| {
            try stdout.print("Issuer: {s}\n", .{issuer});
        }

        if (claims.getSubject()) |subject| {
            try stdout.print("Subject: {s}\n", .{subject});
        }
    }
}
